native/pre do
  ##include <time.h>
  ##include <SDL2/SDL_ttf.h>
end

#include "sdl.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;
input _SDL_KeyboardEvent&& SDL_KEYDOWN;
input _SDL_KeyboardEvent&& SDL_KEYUP;
input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONDOWN;

var _SDL_Window&? window;
    finalize
        window = &_SDL_CreateWindow("Evade the Rain!",
                    _SDL_WINDOWPOS_UNDEFINED,
                    _SDL_WINDOWPOS_UNDEFINED,
                    640, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&&window!);
    end

var _SDL_Renderer&? renderer;
    finalize
        renderer = &_SDL_CreateRenderer(&&window!, -1, 0);
    with
        _SDL_DestroyRenderer(&&renderer!);
    end

class Background with
    var _SDL_Renderer& ren;
    event void purple;
do
    par/or do
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren, 0xFF,0xFF,0xFF,0x00);
            _SDL_RenderFillRect(&&this.ren, null);
        end
    with
        await this.purple;
    end

    var int red = 255;
    var int green = 255;
    var int blue = 255;
    loop do
        watching 50ms do     
            red = red - 2; 
            if red < 0xD8 then
                red = 0xD8;
            end
    
            green = green - 2;
            if green < 0xBF then
                green = 0xBF;
            end
            
            blue = blue - 2;
            if blue < 0xD8 then
                blue = 0xD8;
            end
   
            every SDL_REDRAW do
                 _SDL_SetRenderDrawColor(&&this.ren, red,green,blue,0);
                 _SDL_RenderFillRect(&&this.ren, null);
            end   
        end
    end
end

class Meteor with
    var _SDL_Renderer& ren;
    var _SDL_Rect      r;
	
    var int vx;
    var int vy;

    var int red;
    var int green;
    var int blue;
    event void collided;
do  
    var int x  = 5 + (_rand() % 635) * 1000;
    var int y  = -this.r.h * 1000;
    
    // Set horizontal direction; default is right
    var int direction = _rand() % 3;
    if direction == 0 then 
        vx = vx * -1; // left
    else/if direction == 1 then
        vx = 0; // down
    end

    par/or do
        every dt in SDL_DT do
            if y > 0 and ((x + this.r.w * 1000) > 640000 or x <= 0) then
                vx = -1 * vx;
            end
            x = x + vx * dt;
            y = y + vy * dt;
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren, red, green, blue, 0x00);
            this.r.x = x / 1000;
            this.r.y = y / 1000;
            _SDL_RenderFillRect(&&this.ren, &&this.r);
        end
    with
        await this.collided;
    end
end

class Player with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    event void collided;
do
    var int init_h = this.r.h;
    var int init_y = (480-this.r.h) * 1000;
    var int jump_speed = 100;
    var int x = (640/2 - 20/2) * 1000;
    var int y = init_y;
    var int vx = 0;
    var int vy = 0;


    par/or do
        loop do
            await this.collided;
            this.r.h = this.r.h - 5;
            init_y = (480-this.r.h) * 1000;
            if this.r.h <= 0 then break; end
        end
    with 
        // allow player to regrow after a collision if 10 seconds pass
        // and another collision does not happen
        loop do
            par/or do
                await 10s;
                if this.r.h < init_h then
                    this.r.h = this.r.h + 5;
                    init_y = (480-this.r.h) * 1000;
                end
            with
                // do not r if collision happens inbetween recoveries
                await this.collided; 
            end
        end
    with
        every dt in SDL_DT do // pulo
            if vy < 0 then 
                vy = vy + 2;
            else/if vy > 0 and y < init_y then
                vy = vy - 2;
            else/if y < init_y then // make fall to initial position
                vy = jump_speed;
            else/if y >= init_y then
                 y = init_y;
                 vy = 0;
            end
            x = x + vx*dt;
            y = y + vy*dt;         
        end
    with
        par do
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_LEFT;
                vx = -100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_LEFT;
                vx = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_RIGHT;
                vx = 100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_RIGHT;
                vx = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_UP 
                                              and y == ((480-this.r.h) * 1000);
                vy = -jump_speed;
            end
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren,0x00,0x00,0x00,0x00);
            r.x = x / 1000;
            r.y = y / 1000;
            _SDL_RenderFillRect(&&this.ren, &&r);
        end
    end
end

_srand(_time(null));

par/or do
    await SDL_QUIT;
with
    var Background bg with
        this.ren = &renderer!;
    end;

    var Player p with
        this.ren = &renderer!;
        this.r = _SDL_Rect(0,0,20,50);
    end;

    pool Meteor[] meteors;
    
    var int red   = _rand() % 256;
    var int green = _rand() % 256;
    var int blue  = _rand() % 256;
    
    var int t = 500;
    var int base_speed  = 20;
    var int speed_boost = 10;
    watching p do
        par do
            every (t)ms do
                spawn Meteor in meteors with
                    var int w = 10 + _rand()%40;
                    var int h = 10 + _rand()%40;

                    var int vx = base_speed + _rand() % speed_boost; // right
                    var int vy = base_speed + _rand() % speed_boost;

                    this.ren = &renderer!;
                    this.r   = _SDL_Rect(0,0,w,h);
                    this.vx = vx;
                    this.vy = vy;
                    this.red   = red;
                    this.green = green;
                    this.blue  = blue;
                end;
            end
        with
            // make meteors faster and more frequent
            loop do
                await 15s; 
                base_speed = base_speed * 2;
                speed_boost = speed_boost + 10;
                if base_speed > 59 then 
                    t = 300;
                    break;
                end
            end
        with
            every SDL_DT do
                var Meteor&&?[] tocol; 
                loop meteor in meteors do
                    if _SDL_HasIntersection(&&meteor:r, &&p.r) then
                        tocol = []..tocol..[meteor];
                    end 
                end
                loop i in $tocol do
                    if tocol[i]? then
                        emit tocol[i]!:collided;
                        emit p.collided;             
                    end
                end
            end
        with
            par/or do // easter egg: purple rain
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_p;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_r;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_i;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_n;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_c;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_e;

                _SDL_SetWindowTitle(&&window!, "Evade the PURPLE Rain!");
                emit bg.purple;
            with    
                every (t)ms do
                    red   = _rand() % 256;
                    green = _rand() % 256;
                    blue  = _rand() % 256;
                end
            end
            green = 0;
            every (t)ms do
                red   = 98 + _rand() % 60;
                blue  = 98 + _rand() % 60;
            end
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&&renderer!);
    end
with
    var _SDL_KeyboardEvent&& key;
    key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_ESCAPE;
end

_printf("\n##############################################\n\n");
_printf("            Thanks for playing!!!\n");
_printf("\n##############################################\n\n");

escape 0;
