#include "/home/terra/TerraNG/terra/TerraNet.defs"
#define MAX_TRIALS 10

pktype msg from radioMsg with
  var ubyte  trial;
    var ushort temp;
end
    
var ushort nodeId = getNodeId();
var ushort parentId = nodeId - 1; // default, in

var msg message;
var msg messageCopy;

var ubyte status = 0;

// Column, line and layer of node that sent a message
var ushort recCol;
var ushort recLine;
var ushort recLayer;

// Column, line and layer of runtime node
var ushort nodeCol;
var ushort nodeLine;
var ushort nodeLayer;

status = qClear();
var ubyte nTrials = 1;
var ubyte ack;

// Get the node's column, line and layer. They will be used when
//   electing the parent.
nodeCol   = nodeId/10;
nodeLayer = nodeCol;
nodeLine  = nodeId - 10*nodeCol;
if nodeLine > nodeCol then
  nodeLayer = nodeLine;
end

// for those at the edge of top line set the default parent to the
// left neighbor.
if nodeLine == 1 then
  parentId = 10*nodeCol + 1; 
end

// Max time: ~12s (for node 88; lower for others); change here to make it more strict
var ushort tempWait = nodeLayer * 1250 + nodeId * 17;

// Node 11's parent is the base station.
// Construct the tree in a more deterministic fashion, trying to
// distribute the workload more uniformly.
par/or do
  if nodeId == 11 then
    parentId = 1;
    message.source = nodeId;
    message.target = BROADCAST;
    emit SEND(message);
    await SEND_DONE;  
  else
    loop do
      message = await RECEIVE;
      recCol   = message.source/10;
      recLayer = recCol;
      recLine  = message.source - 10*recCol;
      if recLine > recCol then
        recLayer = recLine;
      end

      // if the message was sent by a node from the previous layer
      if recLayer < nodeLayer then
        parentId = message.source;  
        message.target = BROADCAST;
        message.source = nodeId;
      
        // nodes at the corner of a layer wait longer, so they're
        // the last one to broadcast; otherwise, they could end up 
        // with a disproportionate number of children
        if nodeCol == nodeLine then
          await (150 + 100 * nodeLayer)ms;
        else
          await (nodeLayer * 100)ms;
        end
    
        emit SEND(message);
        await SEND_DONE;

        break;
      end
    end
  end
with
  await 10s;
end

par do
  // Temperature emission
  loop do
    await (tempWait)ms;
    tempWait = tempWait + 5*nTrials; // progressively increase wait time a bit

    if nTrials <= MAX_TRIALS then
      emit REQ_TEMP();
      message.temp   = await TEMP;
      message.type   = 1;
      message.source = nodeId;
      message.target = parentId;
      message.trial  = nTrials;
      inc nTrials;

      status = qPut(message); // message dispatch
    end
  end
with
  // React to incoming messages
  loop do
    message = await RECEIVE;
    if message.trial > 0 then
      message.target = parentId;
      status = qPut(message);
    end
  end
with
  // Message dispatch trail
  loop do
    await Q_READY;
    loop do
      if qSize() > 0 then
        status = qGet(message);

        emit SEND_ACK(message);
        ack = await SEND_DONE_ACK;
        if not ack then
          status = qPut(message);
        end
      else
        status = qClear();
        break;
      end
      await (tempWait/20)ms; // send 20 messages within temperature period
    end
  end
end
